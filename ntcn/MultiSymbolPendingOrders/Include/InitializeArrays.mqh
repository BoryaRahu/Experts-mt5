//--- Связь с основным файлом эксперта
#include "..\MultiSymbolPendingOrders.mq5"
//--- Подключаем свои библиотеки
#include "Enums.mqh"
#include "Errors.mqh"
#include "TradeSignals.mqh"
#include "TradeFunctions.mqh"
#include "ToString.mqh"
#include "Auxiliary.mqh"
//+------------------------------------------------------------------+
//| Заполняет массив символов                                        |
//+------------------------------------------------------------------+
void GetSymbols()
  {
   Symbols[0]=GetSymbolByName(Symbol_01);
   Symbols[1]=GetSymbolByName(Symbol_02);
  }
//+------------------------------------------------------------------+
//| Заполняет массив торговли во временном диапазоне                 |
//+------------------------------------------------------------------+
void GetTimeRangeTrade()
  {
   TimeRangeTrade[0]=TimeRangeTrade_01;
   TimeRangeTrade[1]=TimeRangeTrade_02;
  }
//+------------------------------------------------------------------+
//| Заполняет массив часа начала торговли                            |
//+------------------------------------------------------------------+
void GetStartTrade()
  {
   StartTrade[0]=StartTrade_01;
   StartTrade[1]=StartTrade_02;
  }
//+------------------------------------------------------------------+
//| Заполняет массив часа окончания открытия позиции                 |
//+------------------------------------------------------------------+
void GetStopEntryTrade()
  {
   StopEntryTrade[0]=StopOpenOrders_01;
   StopEntryTrade[1]=StopOpenOrders_02;
  }
//+------------------------------------------------------------------+
//| Заполняет массив часа окончания торговли                         |
//+------------------------------------------------------------------+
void GetEndTrade()
  {
   EndTrade[0]=EndTrade_01;
   EndTrade[1]=EndTrade_02;
  }
//+------------------------------------------------------------------+
//| Заполняет массив Pending Order                                   |
//+------------------------------------------------------------------+
void GetPendingOrder()
  {
   PendingOrder[0]=PendingOrder_01;
   PendingOrder[1]=PendingOrder_02;
  }
//+------------------------------------------------------------------+
//| Заполняет массив Take Profit                                     |
//+------------------------------------------------------------------+
void GetTakeProfit()
  {
   TakeProfit[0]=TakeProfit_01;
   TakeProfit[1]=TakeProfit_02;
  }
//+------------------------------------------------------------------+
//| Заполняет массив Stop Loss                                       |
//+------------------------------------------------------------------+
void GetStopLoss()
  {
   StopLoss[0]=StopLoss_01;
   StopLoss[1]=StopLoss_02;
  }
//+------------------------------------------------------------------+
//| Заполняет массив Trailing Stop                                   |
//+------------------------------------------------------------------+
void GetTrailingStop()
  {
   TrailingStop[0]=TrailingStop_01;
   TrailingStop[1]=TrailingStop_02;
  }
//+------------------------------------------------------------------+
//| Заполняет массив Reverse                                         |
//+------------------------------------------------------------------+
void GetReverse()
  {
   Reverse[0]=Reverse_01;
   Reverse[1]=Reverse_02;
  }
//+------------------------------------------------------------------+
//| Заполняет массив Lot                                             |
//+------------------------------------------------------------------+
void GetLot()
  {
   Lot[0]=Lot_01;
   Lot[1]=Lot_02;
  }
//+------------------------------------------------------------------+
//| Инициализация массива нового бара                                |
//+------------------------------------------------------------------+
void InitializeArrayNewBar()
  {
//--- Инициализация нулями
   ArrayInitialize(new_bar,0);
//---
   for(int s=0; s<NUMBER_OF_SYMBOLS; s++)
     {
      //--- Если торговля по этому символу разрешена
      if(Symbols[s]!="")
         //--- Инициализируем время текущего бара
         CheckNewBar(s);
     }
  }
//+------------------------------------------------------------------+
//| Инициализация массива тикетов последних сделок                   |
//+------------------------------------------------------------------+
void InitializeArrayLastTicketDeals()
  {
//--- Инициализация нулями
   ArrayInitialize(last_ticket_deal,0);
  }
//+------------------------------------------------------------------+
//| Инициализация массивов хэндлов индикаторов                       |
//+------------------------------------------------------------------+
void InitializeArraysHandles()
  {
   ArrayInitialize(spy_indicator_handles,INVALID_HANDLE);
  }
//+------------------------------------------------------------------+
//| Инициализация массивов внешних параметров                        |
//+------------------------------------------------------------------+
void InitializeArraysInputParameters()
  {
   GetSymbols();
   GetTimeRangeTrade();
   GetStartTrade();
   GetStopEntryTrade();
   GetEndTrade();
   GetPendingOrder();
   GetTakeProfit();
   GetStopLoss();
   GetTrailingStop();
   GetReverse();
   GetLot();
  }
//+------------------------------------------------------------------+
//| Добавляет указанный символ в окно "Обзор рынка"                  |
//+------------------------------------------------------------------+
string GetSymbolByName(string symbol)
  {
   string symbol_name="";   // Имя символа на сервере
//--- Если передали пустую строку, вернем пустую строку
   if(symbol=="")
      return("");
//--- Пройтись по списку всех символов на сервере
   for(int s=0; s<SymbolsTotal(false); s++)
     {
      //--- Получим имя символа
      symbol_name=SymbolName(s,false);
      //--- Если искомый символ есть на сервере
      if(symbol==symbol_name)
        {
         //--- Выберем его в окне "Обзор рынка"
         SymbolSelect(symbol,true);
         //--- Вернем имя символа
         return(symbol);
        }
     }
//--- Если искомого символа нет, вернем пустую строку
   Print("Cимвол "+symbol+" не найден на сервере!");
   return("");
  }
//+------------------------------------------------------------------+
